<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试新文章</title>
      <link href="/2023/10/16/%E6%B5%8B%E8%AF%95%E6%96%B0%E6%96%87%E7%AB%A0/"/>
      <url>/2023/10/16/%E6%B5%8B%E8%AF%95%E6%96%B0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>测试新文章</p><hr><p>END</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机入门学习</title>
      <link href="/2023/10/14/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/10/14/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Vision5-STC-ISP-的使用"><a href="#Vision5-STC-ISP-的使用" class="headerlink" title="Vision5 &amp; STC-ISP 的使用"></a>Vision5 &amp; STC-ISP 的使用</h2><h3 id="Vision5"><a href="#Vision5" class="headerlink" title="Vision5"></a>Vision5</h3><p>Project → new vision project → 选存放位置 → 选择 AT89C52单片机 →  创建完毕 → 在Options for Target&#x2F;Output 下点选上Create HEX_File，这样就可以编译后生成可烧录文件了</p><p>Target&#x2F;Source Group 下右键，ADD NEW为新建一个文件，ADD Existing为添加文件目录下的其他文件</p><h3 id="STC-ISP"><a href="#STC-ISP" class="headerlink" title="STC-ISP"></a>STC-ISP</h3><p>单片机型号选择 STC89C52RC&#x2F;LE52RC，其他系统自动</p><hr><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="或赋值"><a href="#或赋值" class="headerlink" title="&amp; | 或赋值"></a>&amp; | 或赋值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TMOD &amp;= <span class="number">0xF0</span>; <span class="comment">// TMOD的第四位清零，高四位保持不变1010 0011 &amp; 1111 0000 = 1010 0000</span></span><br><span class="line">TMOD |= <span class="number">0x01</span>;<span class="comment">// TMOD第一位置为1，高四位不变1010 0011 | 0000 0001 = 1010 0001</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"></th><th align="center">运算</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">两数同为 1，结果为 1</td><td align="center">data&amp;0x01：验证数据某一位是否为1</td></tr><tr><td align="center">|</td><td align="center">两数有一个为 1，结果为 1</td><td align="center">data|0x01： 对数据某一位置为1</td></tr><tr><td align="center">~</td><td align="center">两数为 异，结果为 1</td><td align="center"></td></tr></tbody></table><hr><h2 id="LED"><a href="#LED" class="headerlink" title="LED"></a>LED</h2><p><strong>单片机 I&#x2F;O 两种状态，1为高电平即5V，0为低电平0V</strong></p><h3 id="点亮"><a href="#点亮" class="headerlink" title="点亮"></a>点亮</h3><p>使用十六进制数可直接控制8个LED灯的亮灭，也可使用2进制数控制单独一个等的状态：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P2 = <span class="number">0x01</span>; <span class="comment">// 0000 0001</span></span><br><span class="line">P2_0 = <span class="number">1</span>;  <span class="comment">// 0000 0001</span></span><br></pre></td></tr></table></figure><h3 id="跑马灯"><a href="#跑马灯" class="headerlink" title="跑马灯"></a>跑马灯</h3><p>按顺序逐一点亮LED，并通过延时程序可被观察到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LEDNUM = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123; <span class="comment">// P2_0 -&gt; P2_7</span></span><br><span class="line">LEDNUM++;</span><br><span class="line">    <span class="keyword">if</span> (LEDNUM &gt;= <span class="number">8</span>)&#123;</span><br><span class="line">        LEDNUM = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">这里让LED只亮一个完成跑马灯操作</span></span><br><span class="line"><span class="comment">用LEDNUM来记录亮灯位置，通过位运算来实现跑马特效</span></span><br><span class="line"><span class="comment">因为是定向移动，所以只需要判断LEDNUM是否达到临界值即可</span></span><br><span class="line"><span class="comment">使用位操作来控制亮灯位置，又因为高低电平的缘故，需要对高电平操作0000 1000</span></span><br><span class="line"><span class="comment">最后对高电平操作的结果进行取反操作 1111 0111</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    P2 = ~(<span class="number">0x01</span> &lt;&lt; LEDNUM);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123; <span class="comment">// P2_7 -&gt; P2_0</span></span><br><span class="line"><span class="keyword">if</span> (LEDNUM == <span class="number">0</span>)&#123;</span><br><span class="line">LEDNUM = <span class="number">7</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">LEDNUM--;</span><br><span class="line">&#125;</span><br><span class="line">    P2 = ~(<span class="number">0x01</span> &lt;&lt; LEDNUM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h3><p>不同频率芯片的延时各不相同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Delay_ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> ms)</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(ms--)&#123;</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">199</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h2><p>按键使用方法和LED类似</p><h3 id="按键抖动"><a href="#按键抖动" class="headerlink" title="按键抖动"></a>按键抖动</h3><p>按键拨片在按下和抬起瞬间难免发生抖动造成数据波动</p><p>可通过延时函数来消除这5~10ms的波动影响</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (P3_1 == <span class="number">0</span>)&#123;</span><br><span class="line">        Delay_ms(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">while</span>(P3_1 == <span class="number">0</span>);</span><br><span class="line">        Delay_ms(<span class="number">20</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制计数"><a href="#二进制计数" class="headerlink" title="二进制计数"></a>二进制计数</h3><p>通过点按一个按键来实现二进制计数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> NUM = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (P3_1 == <span class="number">0</span>)&#123;</span><br><span class="line">        ... <span class="comment">//消除按键抖动        </span></span><br><span class="line">      NUM++;</span><br><span class="line">      P2 = ~NUM;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按键控制LED移位"><a href="#按键控制LED移位" class="headerlink" title="按键控制LED移位"></a>按键控制LED移位</h3><p>通过按键实现LED的左右移动</p><p>其实就是跑马灯加上一个按键控制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LEDNUM = <span class="number">0</span>;</span><br><span class="line">P2 = ~<span class="number">0x01</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (P3_0 == <span class="number">0</span>)&#123;</span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">while</span>(P3_0 == <span class="number">0</span>);</span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        LEDNUM++;</span><br><span class="line">        <span class="keyword">if</span> (LEDNUM &gt;= <span class="number">8</span>)&#123;</span><br><span class="line">            LEDNUM = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        P2 = ~(<span class="number">0x01</span>&lt;&lt;LEDNUM);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (P3_1 == <span class="number">0</span>)&#123;</span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">while</span>(P3_1 == <span class="number">0</span>);</span><br><span class="line">        Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LEDNUM == <span class="number">0</span>)&#123;</span><br><span class="line">            LEDNUM = <span class="number">7</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            LEDNUM--;</span><br><span class="line">        &#125;</span><br><span class="line">        P2 = ~(<span class="number">0x01</span>&lt;&lt;LEDNUM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数码管"><a href="#数码管" class="headerlink" title="数码管"></a>数码管</h2><p>数码管由74HC138译码器和动态数码管模块组成</p><p>数码管需要进行消影，在快速位选段选中上一个数据会窜到下一位数据里，形成重影</p><p>只需要加入一个极短的延时就可以解决</p><h2 id="矩阵键盘"><a href="#矩阵键盘" class="headerlink" title="矩阵键盘"></a>矩阵键盘</h2><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><h4 id="波特率计算器"><a href="#波特率计算器" class="headerlink" title="波特率计算器"></a>波特率计算器</h4><p>在STC-IPS软件中有波特率计算功能，注意参数配置就好了，误差比较大的时候可以勾选 波特率倍速SMOD 来降低误差</p><table><thead><tr><th align="center">系统频率</th><th align="center">波特率</th><th align="center">波特率倍速SMOD</th><th align="center">误差</th></tr></thead><tbody><tr><td align="center">11.0592MHz</td><td align="center">4800</td><td align="center">看情况勾选</td><td align="center">~</td></tr><tr><td align="center"><strong>UART选择</strong></td><td align="center"><strong>UART数据位</strong></td><td align="center"><strong>波特率发生器</strong></td><td align="center"><strong>定时器时钟</strong></td></tr><tr><td align="center">串口1</td><td align="center">8位数据</td><td align="center">定时器1（8位重载）</td><td align="center">12T（FOSC&#x2F;12）</td></tr></tbody></table><p>发送和接受设备需要保持相同的波特率才能正确的传输数据，还有应尽可能<strong>不要将传输间隔小于误差值</strong>，可通过短暂的延时函数解决！</p><h2 id="LED点阵屏"><a href="#LED点阵屏" class="headerlink" title="LED点阵屏"></a>LED点阵屏</h2><h2 id="时钟-DS1302"><a href="#时钟-DS1302" class="headerlink" title="时钟 DS1302"></a>时钟 DS1302</h2><p><a href="https://postimg.cc/N5X4fBtF"><img src="https://i.postimg.cc/Kvqsf8sP/image.png" alt="image.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 51 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs安装 &amp; Hexo搭建及使用 &amp; Git安装及使用</title>
      <link href="/2023/10/14/Nodejs%E5%AE%89%E8%A3%85%20&amp;%20Hexo%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/10/14/Nodejs%E5%AE%89%E8%A3%85%20&amp;%20Hexo%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJS-安装-环境搭建"><a href="#NodeJS-安装-环境搭建" class="headerlink" title="NodeJS 安装 &amp; 环境搭建"></a>NodeJS 安装 &amp; 环境搭建</h1><blockquote><p><strong>NodeJS</strong> 的安装说实在搞得头大，总是莫名其妙的出现各种问题，像 cnpm 系统不识别之类的，总之就是非常头大，不过还好，总算是找到了一个没有任何报错的安装方法→ <a href="https://www.bilibili.com/video/BV19F411t7zX/?vd_source=b4e7a930b6168115887cecaf26f330e6">BV19F411t7zX</a>。</p></blockquote><h3 id="下载-NodeJS"><a href="#下载-NodeJS" class="headerlink" title="下载 NodeJS"></a>下载 NodeJS</h3><p><a href="https://nodejs.cn/download/">NodeJS 官网</a> 下载对应版本，这里使用的是 Windows-64 安装包</p><p><a href="https://postimg.cc/rR8XLGWr"><img src="https://i.postimg.cc/SR9yCDxD/image.png" alt="image.png"></a></p><p>解压后新建两个文件夹：用来放缓存文件的 <code>node_cache</code> 和用来放系统全局文件的 <code>node_global</code></p><p><a href="https://postimg.cc/MMpm2vHG"><img src="https://i.postimg.cc/1tpCFFZD/image.png" alt="image.png"></a></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>在<strong>系统变量</strong>中新建一个  <code>NODE_HOME</code></p><p><a href="https://postimg.cc/YvJR3n3D"><img src="https://i.postimg.cc/R00Yv2nm/image.png" alt="image.png"></a></p><p>然后再从<strong>系统变量</strong>的 <code>PATH</code> 中添加下面三段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%NODE_HOME%</span><br><span class="line">%NODE_HOME%\node_cache</span><br><span class="line">%NODE_HOME%\node_global</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/z3cgKLp0"><img src="https://i.postimg.cc/28z7phWR/image.png" alt="image.png"></a></p><p>以上工作完成后，再终端中输入 <code>node -v</code>、<code>npm -v</code> 测试环境变量是否配置成功</p><p>](<a href="https://postimg.cc/VSwc3PSf">https://postimg.cc/VSwc3PSf</a>)</p><h3 id="配置-npm-cnpm"><a href="#配置-npm-cnpm" class="headerlink" title="配置 npm &amp; cnpm"></a>配置 npm &amp; cnpm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 配置 npm 全局</span><br><span class="line">npm config set prefix &quot;node_global 的路径&quot;</span><br><span class="line">// 配置 npm 缓存</span><br><span class="line">npm config set cache &quot;node_cache 的路径&quot;</span><br><span class="line">// 国内下载慢所以用阿里的镜像下载</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>没有报错就说明已经成功配置了，然后就可以下载镜像文件了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm</span><br></pre></td></tr></table></figure><p>安装成功后输入 <code>cnpm -v</code> 测试是否成功，在 node_global 文件夹下也可以看到 cnpm 文件，安装到此完成！</p><hr><h1 id="Hexo-安装-使用"><a href="#Hexo-安装-使用" class="headerlink" title="Hexo 安装 &amp; 使用"></a>Hexo 安装 &amp; 使用</h1><h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><blockquote><p>Hexo 官网有提供的详尽的 <a href="https://hexo.io/zh-cn/docs/">安装使用文档</a>，需要注意的是，Hexo 需要搭配 Git 和 NodeJS 使用，在安装之前需要把前面两个提前安装！也可以参考→<a href="https://www.bilibili.com/video/BV1Yb411a7ty/?vd_source=b4e7a930b6168115887cecaf26f330e6">BV1Yb411a7ty</a></p></blockquote><p>Hexo 使用的是命令行进行操作，首先<strong>安装 Hexo</strong>，hexo -v 测试安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>在博客文件夹根目录下<strong>初始化 Hexo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install// 初始化成功了就不需要再执行这步了</span><br></pre></td></tr></table></figure><h3 id="Hexo-使用"><a href="#Hexo-使用" class="headerlink" title="Hexo 使用"></a>Hexo 使用</h3><table><thead><tr><th align="center">功能</th><th align="center">代码</th><th align="center">代码全称</th></tr></thead><tbody><tr><td align="center">启动本地预览</td><td align="center">hexo s</td><td align="center">hexo server</td></tr><tr><td align="center">清理本地缓存</td><td align="center">hexo clean</td><td align="center">hexo clean</td></tr><tr><td align="center">生成HTML文件</td><td align="center">hexo g</td><td align="center">hexo generate</td></tr><tr><td align="center">推送到云端</td><td align="center">hexo d</td><td align="center">hexo deploy</td></tr><tr><td align="center">创建新的文章</td><td align="center">hexo n</td><td align="center">hexo new</td></tr></tbody></table><blockquote><p>标签 Tag：多个标签用 <code>[ a, b, c ]</code> 分隔开</p></blockquote><h3 id="Blog-部署到-Github"><a href="#Blog-部署到-Github" class="headerlink" title="Blog 部署到 Github"></a>Blog 部署到 Github</h3><p>首先再本目录下安装部署插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>插件装完后去 <code>-config.yml</code> 里进行必要配置！在文件最下面修改 <code># Deployment</code> 里面的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo: https://github.com/choomoray/choomoray.github.io.git</span><br><span class="line">branch: blog// 可以不写，默认保存到 Github 仓库的 master 分支中</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/144gNbj2"><img src="https://i.postimg.cc/1RrDbQcm/image.png" alt="image.png"></a></p><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>把下载好的主题解压到 Theme 文件夹，然后在 <code>-config.yml</code> 里把 Theme 替换成需要修改的主题文件夹名就好了</p><h1 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a>Git 使用</h1><p>克隆分支到重命名文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b backup &lt; Github URL &gt; &lt;重命名文件夹&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 使用教程 </tag>
            
            <tag> 安装配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
